/*****************************************************************************
 * Filename:    caprock_gpio.h
 *
 * Copyright 2010, Research In Motion Ltd
 *
 * Author:      
 *
 * Created:     Feb 24, 2010
 *
 * Description: This file is for Roundrock MG1 (Caprock rev 2 with MG1) platform
 *              eventually, this file will be automatically generated by a script.
 *              but for now lets just write it.
 *
 ****************************************************************************/
 
#ifndef __GPIO_PLATFORM_H__
#define __GPIO_PLATFORM_H__
 

// See obj/<platform>/config_gpio_<platform>.c and obj/<platform>/config_gpio.h for more details


// ---------------------------------------------------
// Define the pad names
// 
//
// ---------------------------------------------------


#if defined( RIM_JACKAL )
static RE_Line ABUF_DATA_INT = GPIO_93;
#endif
#if defined( RIM_JACKAL )
static RE_Line ABUF_ERR_INT = GPIO_92;
#endif
#if defined( RIM_JACKAL )
static RE_Line ABUF_RST_N = GPIO_43;
#endif
#if defined(RIM_ACCELEROMETER)
static RE_Line ACCEL_INT1 = GPIO_100;
#endif
#if defined(RIM_ACCELEROMETER)
static RE_Line ACCEL_INT2 = GPIO_101;
#endif
#if defined( RIM_ACCELEROMETER )
static RE_Line ACCEL_PWR_EN = GPIO_84;
#endif
static RE_Line ADC_ST = PAD_ADC_ST;
static RE_Line ANT_SEL_1 = PAD_RF_IF4;
static RE_Line ANT_SEL_2 = PAD_RF_IF5;
static RE_Line ANT_SEL_3 = PAD_RF_IF2;
static RE_Line ANT_SEL_4 = PAD_RF_IF3;
static RE_Line BT_EN = GPIO_67;
//static RE_Line BT_UART_RX = GPIO_75;
//static RE_Line BT_UART_TX = GPIO_76;
//#if defined( RIM_JACKAL )
//static RE_Line CAM_PWR_EN = GPIO_44;
//#endif
#if !defined( WORKAROUND_TAVORMG_JTAG_FREQ_CHANGE )
#if !defined( DBG_DISPLAY )
static RE_Line CB_UART_RX = GPIO_54;
#endif
#endif
#if !defined( WORKAROUND_TAVORMG_JTAG_FREQ_CHANGE )
#if !defined( DBG_DISPLAY )
static RE_Line CB_UART_TX = GPIO_53;
#endif
#endif
static RE_Line CODEC_INT_N = GPIO_73;
static RE_Line CODEC_RESET_N = GPIO_74;
static RE_Line CONTR_READ_INT = PAD_CONT_READ_INT;
static RE_Line CONT_CLK = PAD_CONT_CLK;
static RE_Line CONT_DATA_0 = PAD_CONT_DATA0;
static RE_Line CONT_DATA_1 = PAD_CONT_DATA1;
static RE_Line CONT_RD_WR = PAD_CONT_RD_WR;
static RE_Line DAC_ST456 = PAD_DAC_ST456;
#if !defined( WORKAROUND_TAVORMG_JTAG_FREQ_CHANGE )
#if defined( DBG_DISPLAY )
static RE_Line DBG_DISP_DATA = GPIO_53;
#endif
#endif
#if defined( DBG_DISPLAY )
static RE_Line DBG_DISP_LOAD = GPIO_12;
#endif
#if !defined( WORKAROUND_TAVORMG_JTAG_FREQ_CHANGE )
#if defined( DBG_DISPLAY )
static RE_Line DBG_DISP_SDCLK = GPIO_54;
#endif
#endif
#if !( defined( CAPROCK_REV1 ) )
static RE_Line DDR_TQ_TEMP_INT = PAD_RDY;
#endif
#if defined( CAPROCK_REV1 )
static RE_Line DDR_TQ_TEMP_INT = PAD_ND_NRE;
#endif
static RE_Line EDGE_CTL_CLK = PAD_RF_IF10;
static RE_Line EDGE_CTL_FRM = PAD_RF_IF11;
static RE_Line EDGE_CTL_RX_TX = PAD_RF_IF12;
static RE_Line EDGE_DAT_CLK = PAD_RF_IF7;
static RE_Line EDGE_DAT_FRM = PAD_RF_IF8;
static RE_Line EDGE_DAT_RX_TX = PAD_RF_IF9;
#if defined(RIM_GPS_SIRF)
static RE_Line GPS_EN = GPIO_61;
#endif
#if defined(RIM_GPS_SIRF)
static RE_Line GPS_FREQ_AID_CLK = GPIO_40;
#endif
#if defined(RIM_GPS_SIRF)
static RE_Line GPS_INT = GPIO_110;
#endif
#if defined(RIM_GPS_SIRF)
static RE_Line GPS_ON_OFF = GPIO_108;
#endif
#if defined(RIM_GPS_SIRF)
static RE_Line GPS_PRG_EN = GPIO_109;
#endif
#if defined(RIM_GPS_SIRF)
static RE_Line GPS_RESET_N = GPIO_111;
#endif
#if defined(RIM_GPS_SIRF)
static RE_Line GPS_UART_CTS = GPIO_101;
#endif
#if defined(RIM_GPS_SIRF)
static RE_Line GPS_UART_RTS = GPIO_100;
#endif
#if defined(RIM_GPS_SIRF)
static RE_Line GPS_UART_RX = GPIO_102;
#endif
#if defined(RIM_GPS_SIRF)
static RE_Line GPS_UART_TX = GPIO_103;
#endif
static RE_Line GSIM_NURST = PAD_GSIM_NURST;
static RE_Line GSIM_UCLK = PAD_GSIM_UCLK;
static RE_Line GSIM_UIO = PAD_GSIM_UIO;
#if defined( WORKAROUND_TAVORMG_JTAG_FREQ_CHANGE )
static RE_Line HACK_TCK = GPIO_53;
#endif
#if defined( WORKAROUND_TAVORMG_JTAG_FREQ_CHANGE )
static RE_Line HACK_TMS = GPIO_54;
#endif
static RE_Line I2C_SCL = GPIO_81;
static RE_Line I2C_SDA = GPIO_82;
static RE_Line I2S_BCLK = GPIO_72;
static RE_Line I2S_SDIN = GPIO_68;
static RE_Line I2S_SDOUT = GPIO_69;
static RE_Line I2S_SYSCLK = GPIO_70;
static RE_Line I2S_WCLK = GPIO_71;
static RE_Line KEYIN_0 = GPIO_0;
static RE_Line KEYIN_1 = GPIO_2;
static RE_Line KEYIN_2 = GPIO_4;
static RE_Line KEYIN_3 = GPIO_6;
static RE_Line KEYIN_4 = GPIO_8;
static RE_Line KEYIN_5 = GPIO_10;
static RE_Line KEYOUT_0 = GPIO_1;
static RE_Line KEYOUT_1 = GPIO_3;
static RE_Line KEYOUT_2 = GPIO_5;
static RE_Line KEYOUT_3 = GPIO_7;
static RE_Line KEYOUT_4 = GPIO_9;
static RE_Line KEYOUT_5 = GPIO_11;
static RE_Line KEYOUT_6 = GPIO_13;
static RE_Line KEYOUT_7 = GPIO_15;
static RE_Line LCD_A0 = GPIO_18;
static RE_Line LCD_CS_N = GPIO_21;
static RE_Line LCD_CTRL = GPIO_42;
static RE_Line LCD_DATA_0 = GPIO_23;
static RE_Line LCD_DATA_1 = GPIO_24;
static RE_Line LCD_DATA_10 = GPIO_33;
static RE_Line LCD_DATA_11 = GPIO_34;
static RE_Line LCD_DATA_12 = GPIO_35;
static RE_Line LCD_DATA_13 = GPIO_36;
static RE_Line LCD_DATA_14 = GPIO_37;
static RE_Line LCD_DATA_15 = GPIO_38;
static RE_Line LCD_DATA_2 = GPIO_25;
static RE_Line LCD_DATA_3 = GPIO_26;
static RE_Line LCD_DATA_4 = GPIO_27;
static RE_Line LCD_DATA_5 = GPIO_28;
static RE_Line LCD_DATA_6 = GPIO_29;
static RE_Line LCD_DATA_7 = GPIO_30;
static RE_Line LCD_DATA_8 = GPIO_31;
static RE_Line LCD_DATA_9 = GPIO_32;
static RE_Line LCD_RD_N = GPIO_17;
static RE_Line LCD_RST_N = GPIO_41;
static RE_Line LCD_VSYNC = GPIO_22;
static RE_Line LCD_VSYNC1 = GPIO_39;
static RE_Line LCD_WR_N = GPIO_19;
static RE_Line LS_PWR = GPIO_52;
#if !( defined( CAPROCK_REV1 ) )
static RE_Line MEMSV_FAST_RST_N = PAD_ND_NCS0;
#endif
#if defined( CAPROCK_REV1 )
static RE_Line MEMSV_FAST_RST_N = PAD_ND_INT_RNB;
#endif
static RE_Line MICROSD_SD_CLK = GPIO_56;
static RE_Line MICROSD_SD_CMD = GPIO_55;
static RE_Line MICROSD_SD_DATA0 = GPIO_57;
static RE_Line MICROSD_SD_DATA1 = GPIO_58;
static RE_Line MICROSD_SD_DATA2 = GPIO_59;
static RE_Line MICROSD_SD_DATA3 = GPIO_60;
static RE_Line MMC_SD_CLK = PAD_DF_ADDR1;
static RE_Line MMC_SD_CMD = PAD_DF_ADDR0;
static RE_Line MMC_SD_DATA0 = PAD_DF_ADDR2;
static RE_Line MMC_SD_DATA1 = PAD_DF_ADDR3;
static RE_Line MMC_SD_DATA2 = PAD_NXCVREN;
static RE_Line MMC_SD_DATA3 = PAD_NLUA;
static RE_Line MMC_SD_DATA4 = PAD_ND_NWE;
static RE_Line MMC_SD_DATA5 = PAD_NBE0;
static RE_Line MMC_SD_DATA6 = PAD_NBE1;
#if !( defined( CAPROCK_REV1 ) )
static RE_Line MMC_SD_DATA7 = PAD_ND_NRE;
#endif
#if defined( CAPROCK_REV1 )
static RE_Line MMC_SD_DATA7 = PAD_RDY;
#endif
static RE_Line ONENAND_AVD_N = PAD_NLLA;
static RE_Line ONENAND_CE_N_CS2 = PAD_ND_NCS2;
static RE_Line ONENAND_CLK = PAD_DF_SCLK_E;
#if !( defined( CAPROCK_REV1 ) )
static RE_Line ONENAND_INT = PAD_ND_INT_RNB;
#endif
#if defined( CAPROCK_REV1 )
static RE_Line ONENAND_INT = PAD_ND_NCS0;
#endif
static RE_Line ONENAND_RD_N = PAD_ND_CLE_NOE;
static RE_Line ONENAND_WR_N = PAD_ND_ALE_NWE;
static RE_Line PCM_CLK = GPIO_63;
static RE_Line PCM_IN = GPIO_65;
static RE_Line PCM_OUT = GPIO_66;
static RE_Line PCM_SYNC = GPIO_64;
static RE_Line PMIC_INT_N = GPIO_83;
static RE_Line PROX_SW_N = GPIO_112;
static RE_Line RF_ON_SWITCH = PAD_RF_IF13;
static RE_Line RF_ON_WB_TX = PAD_RF_IF14;
static RE_Line RF_STROBE = PAD_RF_IF15;
static RE_Line SD_CD_N = GPIO_51;
#if defined( RIM_TOUCHSCREEN )
static RE_Line TOUCH_IRQ = GPIO_20;
#endif
static RE_Line TRACKBALL_DOWN_LINE = GPIO_50;
static RE_Line TRACKBALL_LEFT_LINE = GPIO_48;
static RE_Line TRACKBALL_RIGHT_LINE = GPIO_47;
static RE_Line TRACKBALL_UP_LINE = GPIO_49;
#if defined(RIM_TRACKBALL)
static RE_Line TRACKBALL_X_POWER = GPIO_61;
#endif
#if defined( RIM_JACKAL )
static RE_Line TVOUT_RST_N = GPIO_41;
#endif
#if defined( RIM_JACKAL )
static RE_Line TVOUT_SLP_N = GPIO_16;
#endif
static RE_Line WBRX_CLK = PAD_AFE_RX_CLK;
static RE_Line WBRX_DIN_0 = PAD_AFE_RXIQ0;
static RE_Line WBRX_DIN_1 = PAD_AFE_RXIQ1;
static RE_Line WBRX_DIN_2 = PAD_AFE_RXIQ2;
static RE_Line WBRX_DIN_3 = PAD_AFE_RXIQ3;
static RE_Line WBRX_DIN_4 = PAD_AFE_RXIQ4;
static RE_Line WBRX_DIN_5 = PAD_AFE_RXIQ5;
static RE_Line WBRX_DIN_6 = PAD_AFE_RXIQ6;
static RE_Line WBRX_DIN_7 = PAD_AFE_RXIQ7;
static RE_Line WBTX_CLK = PAD_AFE_TX_CLK;
static RE_Line WBTX_DOUT_0 = PAD_AFE_TXIQ0;
static RE_Line WBTX_DOUT_1 = PAD_AFE_TXIQ1;
static RE_Line WBTX_DOUT_2 = PAD_AFE_TXIQ2;
static RE_Line WBTX_DOUT_3 = PAD_AFE_TXIQ3;
static RE_Line WBTX_DOUT_4 = PAD_AFE_TXIQ4;
static RE_Line WBTX_DOUT_5 = PAD_AFE_TXIQ5;
static RE_Line WBTX_DOUT_6 = PAD_AFE_TXIQ6;
static RE_Line WBTX_DOUT_7 = PAD_AFE_TXIQ7;
static RE_Line WBTX_DOUT_8 = PAD_AFE_TXIQ8;
static RE_Line WBTX_DOUT_9 = PAD_AFE_TXIQ9;
static RE_Line WB_CTL_CLK = PAD_RF_IF20;
static RE_Line WB_CTL_D = PAD_RF_IF22;
static RE_Line WB_CTL_STRB0 = PAD_RF_IF21;
static RE_Line WB_LCK_DET = PAD_RF_IF6;
static RE_Line WB_PA_MODE = PAD_RF_IF1;
static RE_Line WB_RX_PGC_CLK = PAD_RF_IF17;
static RE_Line WB_RX_PGC_D = PAD_RF_IF19;
static RE_Line WB_RX_PGC_STRB = PAD_RF_IF18;
static RE_Line WB_TX_EN = PAD_RF_IF16;
static RE_Line WLAN_EN = GPIO_14;
static RE_Line WLAN_INT_N = GPIO_106;
static RE_Line WLAN_SD_CLK = GPIO_91;
static RE_Line WLAN_SD_CMD = GPIO_90;
static RE_Line WLAN_SD_DATA0 = GPIO_89;
static RE_Line WLAN_SD_DATA1 = GPIO_88;
static RE_Line WLAN_SD_DATA2 = GPIO_87;
static RE_Line WLAN_SD_DATA3 = GPIO_86;
static RE_Line CAM_EN = GPIO_44;             /* ISP PDN */
static RE_Line CAM_RST_N = GPIO_45;             /* ISP RST */
static RE_Line CAM_PWR_EN = GPIO_75;             /* Sensor PWR_EN */
static RE_Line CAM_LDO_EN = GPIO_76;             /* ISP LDO_EN */
static RE_Line CAM_MCLK = GPIO_46;
static RE_Line HS2I2C_SCL = GPIO_79;
static RE_Line HS2I2C_SDA = GPIO_80;



#endif //__GPIO_PLATFORM_H__
